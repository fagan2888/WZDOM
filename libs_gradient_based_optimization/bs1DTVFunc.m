function [v, G, data] = bs1DTVFunc(x, data, isInitial)
%% Regularization function, return the value and Jacobian of function $Dx$
% Bin She, bin.stepbystep@gmail.com, April, 2019
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% INPUT
%
% x             is a column vector; refers to the parameter to be estimated.
%
% data.diffOrder is a scalar; refers to the order of difference operator D
% (D will be generated by this parameter, defaut data.diffOrder is 1,
% meaning D is a first-order difference operator.
% 
% data.nSegments is a scalar; refers to how many parts n is. For example, 
% for pre-stack three-term AVO inversion, nsegments is 3.
%
% isInitial is a logical; if it is true, the function will only perform
% some initial steps.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% OUTPUT
% v             is a vector; refers to Dx.
%
% G             equals to D'.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % if the funcion is called at first time and the difference matrix D is
    % not given, we first generate the difference matix D and save it in
    % data.
    if isInitial && (~isfield(data, 'D') || isempty(data.D))
        [~, data] = bsGetFieldsWithDefaults(data, {'diffOrder', 1; 'nSegments', 1});
        validateattributes(data.diffOrder, {'double'}, {'>=', 1, '<=', 3});
        data.D = bsGen1DDiffOperator(length(x), data.nSegments, data.diffOrder);
%         data.D = data.D * data.lambda;
        data.DTrans = data.D';
%         return;
    end
    
    G = data.DTrans;
    v = data.D * x;
end